#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

require 'timeout'

include Hooky::Postgresql

if payload[:platform] == 'local'
  memcap = 128
  user   = 'microbox'
else
  total_mem = `vmstat -s | grep 'total memory' | awk '{print $1}'`.to_i
  cgroup_mem = `cat /sys/fs/cgroup/memory/memory.limit_in_bytes`.to_i
  memcap = [ total_mem / 1024, cgroup_mem / 1024 / 1024 ].min
end
  # SEMMSL maximum number of semaphores per array = at least 17
  # SEMMNS maximum semaphores system-wide = ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16) * 17
  # SEMOPM maximum operations per semop call = SEMMSL
  # SEMMNI maximum arrays = ceil((max_connections + autovacuum_max_workers + max_worker_processes + 5) / 16)

max_connections = ((memcap / 128) * 200).ceil
semmsl = 1024
semopm = semmsl
semmni = ((max_connections + 3 + `nproc`.to_i * 2 + 5 ) / 16).ceil + 20
semmns = semmni * semmsl

execute "set kernel.sem values" do
  command "sysctl -w kernel.sem=\"#{semmsl} #{semmns} #{semopm} #{semmni}\""
end

# Import service (and start)
directory '/etc/service/db' do
  recursive true
end

directory '/etc/service/db/log' do
  recursive true
end

# Import service (and start)
directory '/etc/service/db/control' do
  recursive true
end

template '/etc/service/db/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "db" })
end

file '/etc/service/db/run' do
  mode 0755
  content File.read("/opt/microbox/hooks/files/postgresql-run")
end

file '/etc/service/db/control/d' do
  mode 0755
  content <<-EOF
#!/bin/bash
if [[ -f /data/var/db/postgresql/postprimary.pid ]]; then
  su gomicro -c 'pg_ctl stop -w -D /data/var/db/postgresql -m f'
fi
EOF
end

service 'db' do
  action :enable
  only_if { File.exist?('/etc/service/db/run') }
end

# Wait for server to start
until File.exists?( "/tmp/.s.PGSQL.5432" )
 sleep( 1 )
end

# Wait for server to start
ensure_socket 'db' do
  port '(4400|5432)'
  action :listening
end

check_for_ready()

# Attach the IP if provided
if payload[:ips]
  # set up persistance
  file "/etc/microinit.d/eth00" do
    content <<-EOF
#!/bin/bash
case $1 in
  start)
    if [[ ! $(ifconfig) =~ eth0:0 ]]; then
      ifconfig eth0:0 #{payload[:ips][:default]}
      arping -A -c 10 -I eth0 #{payload[:ips][:default]}
    fi
    ;;
  stop)
    if [[ $(ifconfig) =~ eth0:0 ]]; then
      ifconfig eth0:0 down
    fi
    ;;
  *)
    echo "$0 start|stop"
    exit 1
    ;;
esac
EOF
    mode 0755
  end

  # bring up interface
  execute "bring up vip" do
    command <<-EOF
      /etc/microinit.d/eth00 start
    EOF
  end
end

if Dir.exist? "/opt/microbox/cron"
  directory '/etc/service/cron'

  hook_file '/etc/service/cron/run' do
    source 'cron'
    mode 0755
  end

  service 'cron' do
    action :enable
    only_if { File.exist?('/etc/service/cron/run') }
  end
end
