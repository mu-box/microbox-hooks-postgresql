#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

require 'timeout'

include Hooky::Postgresql

execute 'ensure no db connections' do
  command <<-EOF
  sed -i 's/5432/5433/g' /data/var/db/postgresql/postgresql.conf
EOF
end

service 'db' do
  action :disable
  init :runit
end

begin
  execute "kill db" do
    command "pg_ctl stop -w -D /data/var/db/postgresql -m f"
  end
rescue
end

service 'db' do
  action :enable
  only_if { File.exist?('/etc/service/db/run') }
end

ensure_socket 'db' do
  port '(5433)'
  action :listening
end

check_for_ready(5433)

# pipe the backup into postgres client to restore from backup
execute 'restore from backup' do
  command <<-EOF
    bash -c 'ssh -o StrictHostKeyChecking=no #{payload[:warehouse][:host]} \
    "cat /data/var/db/postgresql/#{payload[:warehouse][:backup_id]}.gz" \
        | gunzip \
          | /data/bin/psql \
              -U gomicro -p 5433 postgres
    for i in ${PIPESTATUS[@]}; do
      if [ $i -ne 0 ]; then
        exit $i
      fi
    done
    '
  EOF
end

execute 'allow db connections' do
  # reset port, stop database causing a restart
  command <<-EOF
    sed -i 's/5433/5432/g' /data/var/db/postgresql/postgresql.conf
  EOF
end

service 'db' do
  action :disable
  init :runit
end

begin
  execute "kill db" do
    command "pg_ctl stop -w -D /data/var/db/postgresql -m f"
  end
rescue
end

service 'db' do
  action :enable
  only_if { File.exist?('/etc/service/db/run') }
end

ensure_socket 'db' do
  port '(5432)'
  action :listening
end

check_for_ready()
